// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clubs.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addUserClub = `-- name: AddUserClub :exec
UPDATE clubs
SET user_ids = array_append(user_ids, $2)
WHERE id = $1
`

type AddUserClubParams struct {
	ID          uuid.UUID
	ArrayAppend uuid.UUID
}

func (q *Queries) AddUserClub(ctx context.Context, arg AddUserClubParams) error {
	_, err := q.db.ExecContext(ctx, addUserClub, arg.ID, arg.ArrayAppend)
	return err
}

const createClubs = `-- name: CreateClubs :one
INSERT INTO clubs (id, name, genre, user_ids)
VALUES (
    $1,
    $2,   -- name
    $3,   -- genre
    $4    -- user_ids (UUID array)
)
RETURNING id, name, genre, user_ids
`

type CreateClubsParams struct {
	ID      uuid.UUID
	Name    string
	Genre   string
	UserIds []uuid.UUID
}

func (q *Queries) CreateClubs(ctx context.Context, arg CreateClubsParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, createClubs,
		arg.ID,
		arg.Name,
		arg.Genre,
		pq.Array(arg.UserIds),
	)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Genre,
		pq.Array(&i.UserIds),
	)
	return i, err
}

const getClubs = `-- name: GetClubs :many
SELECT id, name, genre, user_ids FROM clubs
`

func (q *Queries) GetClubs(ctx context.Context) ([]Club, error) {
	rows, err := q.db.QueryContext(ctx, getClubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Club
	for rows.Next() {
		var i Club
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Genre,
			pq.Array(&i.UserIds),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromClub = `-- name: RemoveUserFromClub :exec
UPDATE clubs
SET user_ids = array_remove(user_ids, $2)
WHERE id = $1
`

type RemoveUserFromClubParams struct {
	ID          uuid.UUID
	ArrayRemove uuid.UUID
}

func (q *Queries) RemoveUserFromClub(ctx context.Context, arg RemoveUserFromClubParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromClub, arg.ID, arg.ArrayRemove)
	return err
}
