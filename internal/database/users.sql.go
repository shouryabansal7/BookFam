// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addBookIDToUser = `-- name: AddBookIDToUser :exec
UPDATE users
SET book_ids = array_append(book_ids, $2)
WHERE id = $1
`

type AddBookIDToUserParams struct {
	ID          uuid.UUID
	ArrayAppend uuid.UUID
}

func (q *Queries) AddBookIDToUser(ctx context.Context, arg AddBookIDToUserParams) error {
	_, err := q.db.ExecContext(ctx, addBookIDToUser, arg.ID, arg.ArrayAppend)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, name, email, password, book_ids
`

type CreateUserParams struct {
	ID       uuid.UUID
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		pq.Array(&i.BookIds),
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, book_ids FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		pq.Array(&i.BookIds),
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password, book_ids FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		pq.Array(&i.BookIds),
	)
	return i, err
}
